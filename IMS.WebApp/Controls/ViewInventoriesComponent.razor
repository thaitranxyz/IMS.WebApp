@using IMS.CoreBusiness;
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
<div class="input-group mb-3"> 
    <input type="text" class="form-control form-control-lg" placeholder="Type inventory name here to search" @bind-value="inventoryNameToSearch"/>
    <button type="button" class="input-group-text btn-primary" @onclick="@( async () => { await ViewInventories(); })">View</button>
</div>

@*@if (inventories != null && inventories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Quantity
                </th>
                <th>
                    Price
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inv in this.inventories)
            {
                <tr>
                    <td>@inv.InventoryName</td>
                    <td>@inv.Quantity</td>
                    <td>@inv.Price.ToString("c")</td>
                    <td>
                        <button type="button" class="btn btn-light">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}*@

@code {
    private string? inventoryNameToSearch;
    private List<Inventory>? inventories;
    [Parameter]
    public EventCallback<List<Inventory>> OnSearchInventories { get; set; } 
    public EventCallback<List<Inventory>> OnGetInventories { get; set; }

    private async Task ViewInventories()
    {
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(inventoryNameToSearch ?? string.Empty))?.ToList();

        await OnSearchInventories.InvokeAsync(inventories);
    }
}
